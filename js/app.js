// Sinhala sentences/words for each difficulty
const DATA = {
  easy: [
    '‡∂Ö‡∂∏‡∑ä‡∂∏‡∑è', '‡∂≠‡∑è‡∂≠‡∑ä‡∂≠‡∑è', '‡∂¥‡∑è‡∑É‡∂Ω', '‡∂ú‡∑î‡∂ª‡∑î‡∂≠‡∑î‡∂∏‡∑è', '‡∂∏‡∑í‡∂≠‡∑î‡∂ª‡∑è', '‡∂¥‡∑ú‡∂≠', '‡∂Ø‡∑ú‡∂ª', '‡∂ö‡∂©‡∂∫', '‡∂ú‡∑ô‡∂Ø‡∂ª', '‡∂∏‡∂Ω‡∑ä',
    '‡∂ö‡∑î‡∂ª‡∑î‡∂Ω‡∑ä‡∂Ω‡∑ù', '‡∂ú‡∂ü', '‡∂ö‡∑í‡∂ª‡∑í', '‡∂á‡∂≥', '‡∂ö‡∑î‡∂ª‡∑î‡∑É', '‡∂∏‡∑ì‡∂∫‡∑è', '‡∂¥‡∑ê‡∂±‡∑ä', '‡∂â‡∑É‡∑ä‡∂ö‡∑ù‡∂Ω‡∑ö', '‡∂Ö‡∂∫‡∑í‡∂∫‡∑è', '‡∂±‡∂Ç‡∂ú‡∑í'
  ],
  medium: [
    '‡∂Ö‡∂Ø ‡∂¥‡∑è‡∑É‡∂Ω‡∂ß ‡∂∫‡∂±‡∑ä‡∂± ‡∂ï‡∂±‡∑ö', '‡∂∏‡∂∏ ‡∂¥‡∑ú‡∂≠‡∂ö‡∑ä ‡∂ö‡∑í‡∂∫‡∑Ä‡∂±‡∑ä‡∂±‡∑ô‡∂∏‡∑í', '‡∂î‡∂∂ ‡∂ö‡∑ú‡∑Ñ‡∑ô‡∂Ø ‡∂∫‡∂±‡∑ä‡∂±‡∑ö?', '‡∂Ö‡∂¥‡∑í ‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂©‡∑è ‡∂ö‡∂ª‡∂∏‡∑î',
    '‡∂∏‡∂Ω‡∑ä ‡∑Ä‡∂ú‡∑è‡∑Ä ‡∂Ω‡∑É‡∑ä‡∑É‡∂±‡∂∫‡∑í', '‡∂∏‡∂ú‡∑ö ‡∂∏‡∑í‡∂≠‡∑î‡∂ª‡∑è ‡∑Ñ‡∑ú‡∂≥‡∂∫‡∑í', '‡∂á‡∂∫ ‡∂ú‡∑ô‡∂Ø‡∂ª ‡∂∫‡∂∫‡∑í', '‡∂î‡∑Ñ‡∑î ‡∂ö‡∂©‡∂∫‡∂ß ‡∂ú‡∑í‡∂∫‡∑ö‡∂∫',
    '‡∂Ö‡∂¥‡∑í ‡∂ö‡∑í‡∂ª‡∑í ‡∂∂‡∑ú‡∂∏‡∑î', '‡∂î‡∑Ä‡∑î‡∂±‡∑ä ‡∂ú‡∂ü‡∑ö ‡∂±‡∑è‡∂±‡∑Ä‡∑è'
  ],
  hard: [
    '‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∂â‡∂≠‡∑è ‡∑É‡∂ª‡∂Ω ‡∑Ñ‡∑è ‡∂Ω‡∑É‡∑ä‡∑É‡∂± ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä‡∂ö‡∑í', '‡∂Ö‡∂¥‡∑í ‡∑É‡∑í‡∂∫‡∂Ω‡∑î ‡∂Ø‡∑ô‡∂±‡∑è ‡∂ë‡∂ö‡∂ß ‡∑Ä‡∑ê‡∂© ‡∂ö‡∑Ö ‡∂∫‡∑î‡∂≠‡∑î‡∂∫',
    '‡∂∏‡∂ú‡∑ö ‡∂Ö‡∂∫‡∑í‡∂∫‡∑è ‡∑Ä‡∑í‡∑Å‡∑ä‡∑Ä‡∑Ä‡∑í‡∂Ø‡∑ä‚Äç‡∂∫‡∑è‡∂Ω‡∂∫‡∑ô‡∑Ñ‡∑í ‡∂â‡∂ú‡∑ô‡∂± ‡∂ú‡∂±‡∑ì', '‡∂î‡∑Ñ‡∑î‡∂ú‡∑ö ‡∂∏‡∑í‡∂≠‡∑î‡∂ª‡∑è‡∂ú‡∑ö ‡∂ã‡∂¥‡∂±‡∑ä‡∂Ø‡∑í‡∂±‡∂∫ ‡∂Ö‡∂Ø‡∂∫‡∑í',
    '‡∂Ö‡∂¥‡∑í ‡∂¥‡∂ª‡∑í‡∑É‡∂ª‡∂∫ ‡∂Ü‡∂ª‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑Ö ‡∂∫‡∑î‡∂≠‡∑î‡∂∫', '‡∂î‡∂∂‡∑ö ‡∑É‡∑í‡∑Ñ‡∑í‡∂±‡∂∫ ‡∑É‡∑ê‡∂∂‡∑ë ‡∂ö‡∂ª‡∂ú‡∂±‡∑ä‡∂±',
    '‡∂∏‡∂∏ ‡∂ö‡∑è‡∂Ω‡∂∫ ‡∂±‡∑è‡∑É‡∑ä‡∂≠‡∑í ‡∂±‡∑ú‡∂ö‡∂ª ‡∑Ä‡∑ê‡∂© ‡∂ö‡∂ª‡∂∏‡∑í', '‡∂á‡∂∫‡∂ú‡∑ö ‡∂ú‡∑î‡∂ª‡∑î‡∑Ä‡∂ª‡∂∫‡∑è ‡∂â‡∂≠‡∑è ‡∑Ñ‡∑ú‡∂≥‡∂∫‡∑í',
    '‡∂Ö‡∂¥‡∑í ‡∂ë‡∂ö‡∑í‡∂±‡∑ô‡∂ö‡∑è‡∂ß ‡∂ã‡∂Ø‡∑Ä‡∑ä ‡∂ö‡∑Ö ‡∂∫‡∑î‡∂≠‡∑î‡∂∫', '‡∂î‡∑Ñ‡∑î‡∂ú‡∑ö ‡∂Ö‡∂∏‡∑ä‡∂∏‡∑è ‡∂ª‡∑É‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑ë‡∂∏‡∂ö‡∑ä ‡∂¥‡∑í‡∑É‡∂Ø‡∂∏‡∂∫‡∑í'
  ]
};

let currentSentence = '';
let startTime = null;
let timer = null;
let typedChars = 0;
let correctChars = 0;
let finished = false;

const sentenceDisplay = document.getElementById('sentence-display');
const typingInput = document.getElementById('typing-input');
const wpmDisplay = document.getElementById('wpm');
const accuracyDisplay = document.getElementById('accuracy');
const feedback = document.getElementById('feedback');
const startBtn = document.getElementById('start-btn');
const restartBtn = document.getElementById('restart-btn');
const difficultySelect = document.getElementById('difficulty');
const modeToggle = document.getElementById('mode-toggle');
const timerDisplay = document.getElementById('timer-display');
const timeSelect = document.getElementById('time-select');
let countdown = null;
let timeLeft = 60;
const keyboardMethod = document.getElementById('keyboard-method');

// Wijesekara mapping (basic, for demonstration)
const WIJESEKARA_MAP = {
  'a': '‡∂Ö', 'A': '‡∂Ü', 'b': '‡∂∂', 'B': '‡∂∑', 'c': '‡∂†', 'C': '‡∂°', 'd': '‡∂Ø', 'D': '‡∂∞',
  'e': '‡∂ë', 'E': '‡∂í', 'f': '‡∑Ü', 'g': '‡∂ú', 'G': '‡∂ù', 'h': '‡∑Ñ', 'H': '‡∂®', 'i': '‡∂â',
  'I': '‡∂ä', 'j': '‡∂¢', 'J': '‡∂£', 'k': '‡∂ö', 'K': '‡∂õ', 'l': '‡∂Ω', 'L': '‡∑Ö', 'm': '‡∂∏',
  'n': '‡∂±', 'N': '‡∂´', 'o': '‡∂î', 'O': '‡∂ï', 'p': '‡∂¥', 'P': '‡∂µ', 'q': '‡∂§', 'r': '‡∂ª',
  'R': '‡∂ç', 's': '‡∑É', 'S': '‡∑Å', 't': '‡∂≠', 'T': '‡∂Æ', 'u': '‡∂ã', 'U': '‡∂å', 'v': '‡∑Ä',
  'w': '‡∑Ä', 'W': '‡∂°', 'x': '‡∂ö‡∑ä‚Äç‡∑Ç', 'y': '‡∂∫', 'Y': '‡∂∫', 'z': '‡∂£', 'Z': '‡∂£',
  // Add more for full layout
};

function wijesekaraTransliterate(input) {
  let out = '';
  for (let i = 0; i < input.length; i++) {
    const c = input[i];
    out += WIJESEKARA_MAP[c] || c;
  }
  return out;
}

// --- Sinhala Phonetic Transliteration ---
// Basic mapping for common Sinhala sounds
const PHONETIC_MAP = [
  ['aa', '‡∂Ü'], ['ae', '‡∂á'], ['ai', '‡∂ì'], ['au', '‡∂ñ'],
  ['a', '‡∂Ö'], ['b', '‡∂∂'], ['ch', '‡∂†'], ['d', '‡∂Ø'], ['dh', '‡∂∞'], ['e', '‡∂ë'], ['ee', '‡∂ä'], ['ei', '‡∂í'],
  ['g', '‡∂ú'], ['h', '‡∑Ñ'], ['i', '‡∂â'], ['ii', '‡∂ä'], ['j', '‡∂¢'], ['k', '‡∂ö'], ['l', '‡∂Ω'], ['m', '‡∂∏'],
  ['n', '‡∂±'], ['ng', '‡∂û'], ['o', '‡∂î'], ['oo', '‡∂ï'], ['p', '‡∂¥'], ['r', '‡∂ª'], ['s', '‡∑É'], ['t', '‡∂≠'],
  ['th', '‡∂Æ'], ['u', '‡∂ã'], ['uu', '‡∂å'], ['v', '‡∑Ä'], ['w', '‡∑Ä'], ['y', '‡∂∫'], ['sh', '‡∑Å'], ['gn', '‡∂•'],
  ['·π≠', '‡∂ß'], ['·∏ç', '‡∂©'], ['·πá', '‡∂´'], ['·∏∑', '‡∑Ö'], ['≈õ', '‡∑Ç'], ['f', '‡∑Ü'], ['z', '‡∂§'],
  // Vowel signs (matra)
  ['aa', '‡∑è'], ['ae', '‡∑ê'], ['ai', '‡∑õ'], ['au', '‡∑û'], ['e', '‡∑ô'], ['ee', '‡∑ì'], ['ei', '‡∑ö'], ['i', '‡∑í'], ['ii', '‡∑ì'], ['o', '‡∑ú'], ['oo', '‡∑ù'], ['u', '‡∑î'], ['uu', '‡∑ñ'],
  // Special
  ['·πÉ', '‡∂Ç'], ['·∏•', '‡∂É'], ['mÃá', '‡∂Ç'], ['nÃá', '‡∂Ç'],
];

function transliterateToSinhala(input) {
  let text = input;
  // Sort by length to match longest first
  PHONETIC_MAP.sort((a, b) => b[0].length - a[0].length);
  for (const [en, si] of PHONETIC_MAP) {
    const re = new RegExp(en, 'g');
    text = text.replace(re, si);
  }
  return text;
}

function renderSentenceDisplay() {
  const val = typingInput.value;
  let html = '';
  for (let i = 0; i < currentSentence.length; i++) {
    if (i < val.length) {
      if (val[i] === currentSentence[i]) {
        html += `<span class='correct-char'>${currentSentence[i]}</span>`;
      } else {
        html += `<span class='mistake-char'>${currentSentence[i]}</span>`;
      }
    } else {
      html += `<span class='pending-char'>${currentSentence[i]}</span>`;
    }
  }
  sentenceDisplay.innerHTML = html;
}

// --- Replace input with Sinhala in real-time, based on method ---
typingInput.addEventListener('input', (e) => {
  if (finished) return;
  const caret = typingInput.selectionStart;
  let sinhala = typingInput.value;
  if (keyboardMethod.value === 'phonetic') {
    sinhala = transliterateToSinhala(typingInput.value);
  } else if (keyboardMethod.value === 'wijesekara') {
    sinhala = wijesekaraTransliterate(typingInput.value);
  } else if (keyboardMethod.value === 'unicode') {
    // Unicode: do not change input, just use as-is
    sinhala = typingInput.value;
  }
  typingInput.value = sinhala;
  typingInput.setSelectionRange(caret, caret);
  renderSentenceDisplay();
  // Continue with normal logic
  if (!startTime) startTime = Date.now();
  const val = typingInput.value;
  typedChars = val.length;
  let correct = 0;
  for (let i = 0; i < val.length; i++) {
    if (val[i] === currentSentence[i]) correct++;
  }
  correctChars = correct;
  // Accuracy
  const accuracy = typedChars ? Math.round((correctChars / typedChars) * 100) : 0;
  accuracyDisplay.textContent = accuracy;
  // WPM
  const elapsed = (Date.now() - startTime) / 1000 / 60;
  const wpm = elapsed > 0 ? Math.round((correctChars / 5) / elapsed) : 0;
  wpmDisplay.textContent = wpm;
  // Feedback
  let feedbackMsg = '';
  if (val === currentSentence) {
    feedbackMsg = 'Great!';
    if (lastFeedback !== 'Great!') successSound.play();
    endTest();
  } else if (currentSentence.startsWith(val)) {
    feedbackMsg = '';
  } else {
    feedbackMsg = 'Incorrect!';
    if (lastFeedback !== 'Incorrect!') errorSound.play();
  }
  feedback.textContent = feedbackMsg;
  lastFeedback = feedbackMsg;
});

function pickSentence() {
  const level = difficultySelect.value;
  const arr = DATA[level];
  return arr[Math.floor(Math.random() * arr.length)];
}

function resetStats() {
  wpmDisplay.textContent = '0';
  accuracyDisplay.textContent = '0';
  feedback.textContent = '';
}

function formatTime(sec) {
  const m = String(Math.floor(sec / 60)).padStart(2, '0');
  const s = String(sec % 60).padStart(2, '0');
  return `${m}:${s}`;
}

function resetTimer() {
  clearInterval(countdown);
  timeLeft = parseInt(timeSelect.value, 10);
  timerDisplay.textContent = formatTime(timeLeft);
}

function startTimer() {
  resetTimer();
  countdown = setInterval(() => {
    timeLeft--;
    timerDisplay.textContent = formatTime(timeLeft);
    if (timeLeft <= 0) {
      clearInterval(countdown);
      timerDisplay.textContent = '00:00';
      endTest();
    }
  }, 1000);
}

function startTest() {
  finished = false;
  currentSentence = pickSentence();
  renderSentenceDisplay();
  typingInput.value = '';
  typingInput.disabled = false;
  typingInput.focus();
  startTime = null;
  typedChars = 0;
  correctChars = 0;
  resetStats();
  startBtn.style.display = 'none';
  restartBtn.style.display = 'inline-block';
  startTimer();
}

function endTest() {
  finished = true;
  typingInput.disabled = true;
  feedback.textContent = 'Finished!';
  clearInterval(countdown);
  // Save to leaderboard
  const wpm = parseInt(wpmDisplay.textContent, 10);
  const accuracy = parseInt(accuracyDisplay.textContent, 10);
  if (wpm > 0 && accuracy > 0) {
    saveToLeaderboard(wpm, accuracy);
    renderLeaderboard();
  }
}

startBtn.addEventListener('click', startTest);
restartBtn.addEventListener('click', startTest);
difficultySelect.addEventListener('change', () => {
  if (!finished) startTest();
});
timeSelect.addEventListener('change', resetTimer);

// Dark/Light mode toggle
modeToggle.addEventListener('click', () => {
  document.body.classList.toggle('dark');
  modeToggle.textContent = document.body.classList.contains('dark') ? '‚òÄÔ∏è' : 'üåô';
});

// Mobile: focus input on sentence click
sentenceDisplay.addEventListener('click', () => {
  typingInput.focus();
});

// Sound feedback
const successSound = new Audio('assets/success.mp3');
const errorSound = new Audio('assets/error.mp3');
let lastFeedback = '';

// Initial state
resetStats();
startBtn.style.display = 'inline-block';
restartBtn.style.display = 'none';
resetTimer(); 